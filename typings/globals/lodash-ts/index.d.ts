// Generated by typings
// Source: node_modules/lodash-ts/typings/lodash-ts.d.ts
declare module 'lodash-ts/_arrayIncludes' {
	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to search.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	export default function arrayIncludes<T>(array: T[], value: T): boolean;

}
declare module 'lodash-ts/_baseDifference' {
	/**
	 * The base implementation of methods like `_.difference` without support
	 * for excluding multiple arrays or iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	export default function baseDifference<T>(array: T[], values: T[]): T[];

}
declare module 'lodash-ts/isObjectLike' {
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	export default function isObjectLike(value: any): boolean;

}
declare module 'lodash-ts/_toSource' {
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	export default function toSource(func: Function): any;

}
declare module 'lodash-ts/_getTag' {
	export enum enumTags {
	    mapTag = 0,
	    objectTag = 1,
	    promiseTag = 2,
	    setTag = 3,
	    weakMapTag = 4,
	    dataViewTag = 5,
	    argsTag = 6,
	    arrayTag = 7,
	    boolTag = 8,
	    dateTag = 9,
	    errorTag = 10,
	    funcTag = 11,
	    genTag = 12,
	    numberTag = 13,
	    regexpTag = 14,
	    stringTag = 15,
	    symbolTag = 16,
	    arrayBufferTag = 17,
	    float32Tag = 18,
	    float64Tag = 19,
	    int8Tag = 20,
	    int16Tag = 21,
	    int32Tag = 22,
	    uint8Tag = 23,
	    uint8ClampedTag = 24,
	    uint16Tag = 25,
	    uint32Tag = 26,
	}
	export function str2tag(tag: string): enumTags; let getTag: (value: any) => enumTags;
	export default getTag;

}
declare module 'lodash-ts/isSymbol' {
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	export default function isSymbol(value: any): boolean;

}
declare module 'lodash-ts/_baseExtremum' {
	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */
	export default function baseExtremum<T>(array: T[], comparator: (v1: T, v2: T) => boolean): T;

}
declare module 'lodash-ts/isObject' {
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	export default function isObject(value: any): boolean;

}
declare module 'lodash-ts/isFunction' {
	/**
	 * @module @feidao/core/lodash/isFunction
	 * @example
	 * import isFunction from '@feidao/core/lodash/isFunction';
	 *
	 * isFunction(_);
	 * // => true
	 *
	 * isFunction(/abc/);
	 * @see _.isFunction
	*/
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	export default function isFunction(value: any): boolean;

}
declare module 'lodash-ts/isLength' {
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length,
	 *  else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	export default function isLength(value: any): boolean;

}
declare module 'lodash-ts/isArrayLike' {
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	export default function isArrayLike(value: any): boolean;

}
declare module 'lodash-ts/isArrayLikeObject' {
	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	export default function isArrayLikeObject(value: any): boolean;

}
declare module 'lodash-ts/isArguments' {
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	export default function isArguments(value: any): boolean;

}
declare module 'lodash-ts/isArray' {
	 var _default: (arg: any) => arg is any[];
	export default _default;

}
declare module 'lodash-ts/_baseFlatten' {
	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	export default function baseFlatten(array: any[], depth: number, predicate?: (value: any) => boolean, isStrict?: boolean): any[];

}
declare module 'lodash-ts/_baseToString' {
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	export default function baseToString(value: any): string;

}
declare module 'lodash-ts/toString' {
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	export default function toString(value: any): string;

}
declare module 'lodash-ts/_stringToPath' {
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	export default function stringToPath(str: string): string[];

}
declare module 'lodash-ts/_castPath' {
	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	export default function castPath(value: string | string[]): string[];

}
declare module 'lodash-ts/_isKey' {
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	export default function isKey(value: any, object?: any): boolean;

}
declare module 'lodash-ts/_toKey' {
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	export default function toKey(value: any): string | symbol;

}
declare module 'lodash-ts/_baseGet' {
	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	export default function baseGet(obj: any, path: string | string[]): any;

}
declare module 'lodash-ts/_getPrototype' {
	/**
	 * Gets the `[[Prototype]]` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {null|Object} Returns the `[[Prototype]]`.
	 */
	export default function getPrototype(value: any): any;

}
declare module 'lodash-ts/_baseHas' {
	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	export default function baseHas<T extends {}>(object: T, key: string | symbol): boolean;

}
declare module 'lodash-ts/_isHostObject' {
	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	export default function isHostObject(value: any): boolean;

}
declare module 'lodash-ts/_root' {
	 var _default: any;
	export default _default;

}
declare module 'lodash-ts/_coreJsData' {
	 const coreJsData: any;
	export default coreJsData;

}
declare module 'lodash-ts/_baseIsNative' {
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	export default function baseIsNative(value: any): boolean;

}
declare module 'lodash-ts/_baseValues' {
	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	export default function baseValues(object: any, props: (string | symbol)[]): any[];

}
declare module 'lodash-ts/_castSlice' {
	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	export default function castSlice(array: any[], start?: number, end?: number): any[];

}
declare module 'lodash-ts/_reHasComplexSymbol' {
	 const reHasComplexSymbol: RegExp;
	export default reHasComplexSymbol;

}
declare module 'lodash-ts/_stringToArray' {
	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	export default function stringToArray(str: string): RegExpMatchArray;

}
declare module 'lodash-ts/_createCaseFirst' {
	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	export default function createCaseFirst(methodName: string): (str: string) => string;

}
declare module 'lodash-ts/_deburrLetter' {
	/**
	 * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	export default function deburrLetter(letter: string): string;

}
declare module 'lodash-ts/deburr' {
	/**
	 * Deburrs `string` by converting
	 * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * to basic latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	export default function deburr(string: any): any;

}
declare module 'lodash-ts/words' {
	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	export default function words(str: string, pattern?: RegExp, guard?: boolean): RegExpMatchArray | any[];

}
declare module 'lodash-ts/_createCompounder' {
	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	export default function createCompounder(callback: (previousValue: string, currentValue: string, currentIndex: number, array?: string[]) => string): (str: string) => string;

}
declare module 'lodash-ts/_stringSize' {
	/**
	 * Gets the number of symbols in `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the string size.
	 */
	export default function stringSize(str: string): number;

}
declare module 'lodash-ts/_createPadding' {
	/**
	 * Creates the padding for `string` based on `length`. The `chars` string
	 * is truncated if the number of characters exceeds `length`.
	 *
	 * @private
	 * @param {number} length The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padding for `string`.
	 */
	export default function createPadding(length: number, chars: any): any;

}
declare module 'lodash-ts/toFinite' {
	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	export default function toFinite(value: number): number;

}
declare module 'lodash-ts/toInteger' {
	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	export default function toInteger(value: any): number;

}
declare module 'lodash-ts/_createRound' {
	/**
	 * Creates a function like `_.round`.
	 *
	 * @private
	 * @param {string} methodName The name of the `Math` method to use when rounding.
	 * @returns {Function} Returns the new round function.
	 */
	export default function createRound(func: (num: number | string) => number): (num: number, precision: any) => number;

}
declare module 'lodash-ts/stubArray' {
	/**
	 * A method that returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	export default function stubArray(): any[];

}
declare module 'lodash-ts/_getSymbols' {
	 let getSymbols: (object: any) => symbol[];
	export default getSymbols;

}
declare module 'lodash-ts/isString' {
	/**
	 * @module @feidao/core/lodash/isString
	 * @example
	 * import isString from '@feidao/core/lodash/isString';
	 *
	 * isString('abc');
	 * // => true
	 *
	 * isString(1);
	 * // => false
	 * @see _.isString
	*/
	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	export default function isString(value: any): boolean;

}
declare module 'lodash-ts/_indexKeys' {
	 function indexKeys(object: any): string[];
	export default indexKeys;

}
declare module 'lodash-ts/_isIndex' {
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	export default function isIndex(value: any, length?: number): boolean;

}
declare module 'lodash-ts/_isPrototype' {
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	export default function isPrototype(value: any): boolean;

}
declare module 'lodash-ts/keys' {
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	export default function keys(object: any): string[];

}
declare module 'lodash-ts/_getAllKeys' {
	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	export default function getAllKeys(object: any): string[];

}
declare module 'lodash-ts/_hasPath' {
	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	export default function hasPath<T extends {}>(obj: T, path: string | string[], hasFunc: (object: T, key: string | symbol) => boolean): boolean;

}
declare module 'lodash-ts/_iteratorToArray' {
	/**
	 * Converts `iterator` to an array.
	 *
	 * @private
	 * @param {Object} iterator The iterator to convert.
	 * @returns {Array} Returns the converted array.
	 */
	export default function iteratorToArray<T>(iterator: Iterator<T>): T[];

}
declare module 'lodash-ts/_mapToArray' {
	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	export default function mapToArray<K, V>(map: Map<K, V>): [K, V][];

}
declare module 'lodash-ts/_mixin' {
	export function copyArray<T>(array: T[], inherited: boolean): T[];
	export interface MixinArgs<T extends {}, U extends {}> {
	    deep: boolean;
	    inherited: boolean;
	    sources: U[];
	    target: T;
	}
	export default function _mixin<T extends {}, U extends {}>(kwArgs: MixinArgs<T, U>): T & U;

}
declare module 'lodash-ts/_reEscape' {
	 const reEscape: RegExp;
	export default reEscape;

}
declare module 'lodash-ts/_reEvaluate' {
	 const reEvaluate: RegExp;
	export default reEvaluate;

}
declare module 'lodash-ts/_reInterpolate' {
	 const reInterpolate: RegExp;
	export default reInterpolate;

}
declare module 'lodash-ts/_setToArray' {
	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	export default function setToArray<T>(set: Set<T>): T[];

}
declare module 'lodash-ts/_unescapeHtmlChar' {
	 function unescapeHtmlChar(chr: any): any;
	export default unescapeHtmlChar;

}
declare module 'lodash-ts/assign' {
	export const assign: <T extends {}, U extends {}>(target: T, ...sources: U[]) => T & U;
	export default assign;

}
declare module 'lodash-ts/assignDeep' {
	/**
	 * Copies the values of all enumerable own properties of one or more source objects to the target object,
	 * recursively copying all nested objects and arrays as well.
	 *
	 * @param target The target object to receive values from source objects
	 * @param sources Any number of objects whose enumerable own properties will be copied to the target object
	 * @return The modified target object
	 */
	export function deepAssign<T extends {}, U extends {}, V extends {}, W extends {}, X extends {}, Y extends {}, Z extends {}>(target: T, source1: U, source2: V, source3: W, source4: X, source5: Y, source6: Z): T & U & V & W & X & Y & Z;
	export function deepAssign<T extends {}, U extends {}, V extends {}, W extends {}, X extends {}, Y extends {}>(target: T, source1: U, source2: V, source3: W, source4: X, source5: Y): T & U & V & W & X & Y;
	export function deepAssign<T extends {}, U extends {}, V extends {}, W extends {}, X extends {}>(target: T, source1: U, source2: V, source3: W, source4: X): T & U & V & W & X;
	export function deepAssign<T extends {}, U extends {}, V extends {}, W extends {}>(target: T, source1: U, source2: V, source3: W): T & U & V & W;
	export function deepAssign<T extends {}, U extends {}, V extends {}>(target: T, source1: U, source2: V): T & U & V;
	export function deepAssign<T extends {}, U extends {}>(target: T, source: U): T & U;
	export default deepAssign;

}
declare module 'lodash-ts/get' {
	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is used in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	export default function get(obj: any, path: string | string[], defaultValue?: any): any;

}
declare module 'lodash-ts/at' {
	/**
	 * Creates an array of values corresponding to `paths` of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {...(string|string[])} [paths] The property paths of elements to pick.
	 * @returns {Array} Returns the picked values.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	 *
	 * _.at(object, ['a[0].b.c', 'a[1]']);
	 * // => [3, 4]
	 */
	export default function at(object: any, paths: string[]): any[];

}
declare module 'lodash-ts/chunk' {
	/**
	 * Creates an array of elements split into groups the length of `size`.
	 * If `array` can't be split evenly, the final chunk will be the remaining
	 * elements.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to process.
	 * @param {number} [size=1] The length of each chunk
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the new array of chunks.
	 * @example
	 *
	 * _.chunk(['a', 'b', 'c', 'd'], 2);
	 * // => [['a', 'b'], ['c', 'd']]
	 *
	 * _.chunk(['a', 'b', 'c', 'd'], 3);
	 * // => [['a', 'b', 'c'], ['d']]
	 */
	export default function chunk<T>(array: T[], size: number): any[];

}
declare module 'lodash-ts/clamp' {
	/**
	 * Clamps `number` within the inclusive `lower` and `upper` bounds.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Number
	 * @param {number} number The number to clamp.
	 * @param {number} [lower] The lower bound.
	 * @param {number} upper The upper bound.
	 * @returns {number} Returns the clamped number.
	 * @example
	 *
	 * _.clamp(-10, -5, 5);
	 * // => -5
	 *
	 * _.clamp(10, -5, 5);
	 * // => 5
	 */
	export default function clamp(number: number, lower: number, upper: number): number;

}
declare module 'lodash-ts/clone' {
	/**
	 * @module @feidao/core/lodash/clone
	 * @example
	 * import clone from '@feidao/core/lodash/clone';
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var shallow = clone(objects);
	 * console.log(shallow[0] === objects[0]);
	 * // => true
	 * @see _.clone
	*/
	/**
	 * Creates a shallow clone of `value`.
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	 * and supports cloning arrays, array buffers, booleans, date objects, maps,
	 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	 * arrays. The own enumerable properties of `arguments` objects are cloned
	 * as plain objects. An empty object is returned for uncloneable values such
	 * as error objects, functions, DOM nodes, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @returns {*} Returns the cloned value.
	 * @see _.cloneDeep
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var shallow = _.clone(objects);
	 * console.log(shallow[0] === objects[0]);
	 * // => true
	 */
	export default function clone<T>(value: T, isDeep?: boolean): T;

}
declare module 'lodash-ts/cloneDeep' {
	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	export default function cloneDeep(value: any): any;

}
declare module 'lodash-ts/create' {
	/**
	 * Creates a new object from the given prototype, and copies all enumerable own properties of one or more
	 * source objects to the newly created target object.
	 *
	 * @param prototype The prototype to create a new object from
	 * @param mixins Any number of objects whose enumerable own properties will be copied to the created object
	 * @return The new object
	 */
	export function create<T extends {}, U extends {}, V extends {}, W extends {}, X extends {}, Y extends {}, Z extends {}>(prototype: T, mixin1: U, mixin2: V, mixin3: W, mixin4: X, mixin5: Y, mixin6: Z): T & U & V & W & X & Y & Z;
	export function create<T extends {}, U extends {}, V extends {}, W extends {}, X extends {}, Y extends {}>(prototype: T, mixin1: U, mixin2: V, mixin3: W, mixin4: X, mixin5: Y): T & U & V & W & X & Y;
	export function create<T extends {}, U extends {}, V extends {}, W extends {}, X extends {}>(prototype: T, mixin1: U, mixin2: V, mixin3: W, mixin4: X): T & U & V & W & X;
	export function create<T extends {}, U extends {}, V extends {}, W extends {}>(prototype: T, mixin1: U, mixin2: V, mixin3: W): T & U & V & W;
	export function create<T extends {}, U extends {}, V extends {}>(prototype: T, mixin1: U, mixin2: V): T & U & V;
	export function create<T extends {}, U extends {}>(prototype: T, mixin: U): T & U;
	export function create<T extends {}>(prototype: T): T;
	export default create;

}
declare module 'lodash-ts/eq' {
	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	export default function eq(value: any, other: any): boolean;

}
declare module 'lodash-ts/escape' {
	/**
	 * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	 * their corresponding HTML entities.
	 *
	 * **Note:** No other characters are escaped. To escape additional
	 * characters use a third-party library like [_he_](https://mths.be/he).
	 *
	 * Though the ">" character is escaped for symmetry, characters like
	 * ">" and "/" don't need escaping in HTML and have no special meaning
	 * unless they're part of a tag or unquoted attribute value. See
	 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	 * (under "semi-related fun fact") for more details.
	 *
	 * Backticks are escaped because in IE < 9, they can break out of
	 * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	 * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	 * [#133](https://html5sec.org/#133) of the
	 * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	 *
	 * When working with HTML you should always
	 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	 * XSS vectors.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escape('fred, barney, & pebbles');
	 * // => 'fred, barney, &amp; pebbles'
	 */
	export default function escape(str: any): any;

}
declare module 'lodash-ts/escapeRegExp' {
	/**
	 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https://lodash\.com/\)'
	 */
	export default function escapeRegExp(str: any): any;

}
declare module 'lodash-ts/mixin' {
	/**
	 * Copies the values of all enumerable (own or inherited) properties of one or more source objects to the
	 * target object.
	 *
	 * @return The modified target object
	 */
	export default function mixin<T0 extends {}, T1 extends {}>(s0: T0, s1: T1): T0 & T1;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}>(s0: T0, s1: T1, s2: T2): T0 & T1 & T2;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3): T0 & T1 & T2 & T3;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4): T0 & T1 & T2 & T3 & T4;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5): T0 & T1 & T2 & T3 & T4 & T5;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6): T0 & T1 & T2 & T3 & T4 & T5 & T6;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}, T14 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13, s14: T14): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13 & T14;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}, T14 extends {}, T15 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13, s14: T14, s15: T15): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13 & T14 & T15;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}, T14 extends {}, T15 extends {}, T16 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13, s14: T14, s15: T15, s16: T16): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13 & T14 & T15 & T16;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}, T14 extends {}, T15 extends {}, T16 extends {}, T17 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13, s14: T14, s15: T15, s16: T16, s17: T17): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13 & T14 & T15 & T16 & T17;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}, T14 extends {}, T15 extends {}, T16 extends {}, T17 extends {}, T18 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13, s14: T14, s15: T15, s16: T16, s17: T17, s18: T18): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13 & T14 & T15 & T16 & T17 & T18;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}, T14 extends {}, T15 extends {}, T16 extends {}, T17 extends {}, T18 extends {}, T19 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13, s14: T14, s15: T15, s16: T16, s17: T17, s18: T18, s19: T19): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13 & T14 & T15 & T16 & T17 & T18 & T19;
	export default function mixin<T0 extends {}, T1 extends {}, T2 extends {}, T3 extends {}, T4 extends {}, T5 extends {}, T6 extends {}, T7 extends {}, T8 extends {}, T9 extends {}, T10 extends {}, T11 extends {}, T12 extends {}, T13 extends {}, T14 extends {}, T15 extends {}, T16 extends {}, T17 extends {}, T18 extends {}, T19 extends {}, T20 extends {}>(s0: T0, s1: T1, s2: T2, s3: T3, s4: T4, s5: T5, s6: T6, s7: T7, s8: T8, s9: T9, s10: T10, s11: T11, s12: T12, s13: T13, s14: T14, s15: T15, s16: T16, s17: T17, s18: T18, s19: T19, s20: T20): T0 & T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8 & T9 & T10 & T11 & T12 & T13 & T14 & T15 & T16 & T17 & T18 & T19 & T20;

}
declare module 'lodash-ts/extend' {
	/**
	* @Author:				taoqf
	* @Date:				2016-06-15 11:59:02
	* @Last Modified by:	taoqf
	* @Last Modified time:	2016-06-17 15:54:37
	* @CopyRight			飞道科技
	*/
	/**
	* @module @feidao/core/lodash/extend
	* @example
	* import extend from '@feidao/core/lodash/extend';
	* let obj1 = {};
	* let obj2 = {foo: 'bar'};
	* let obj3 = {bar: 'foo'};
	* let obj = extend(obj1, obj2, obj3);
	* console.info(obj);	// {foo: 'bar', bar: 'foo'}
	 * @see _.extend
	*/
	export { default } from 'lodash-ts/mixin';

}
declare module 'lodash-ts/flatten' {
	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	export default function flatten(array: any[], depth?: number): any[];

}
declare module 'lodash-ts/flattenDeep' {
	/**
	 * Recursively flattens `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flattenDeep([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, 3, 4, 5]
	 */
	export default function flattenDeep(array: any[]): any[];

}
declare module 'lodash-ts/floor' {
	 var _default: (num: number, precision: any) => number;
	export default _default;

}
declare module 'lodash-ts/fromPairs' {
	/**
	 * The inverse of `_.toPairs`; this method returns an object composed
	 * from key-value `pairs`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} pairs The key-value pairs.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * _.fromPairs([['fred', 30], ['barney', 40]]);
	 * // => { 'fred': 30, 'barney': 40 }
	 */
	export default function fromPairs(pairs: [string, any][]): {
	    [name: string]: any;
	};

}
declare module 'lodash-ts/has' {
	/**
	 * Checks if `path` is a direct property of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': 2 } };
	 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b');
	 * // => true
	 *
	 * _.has(object, ['a', 'b']);
	 * // => true
	 *
	 * _.has(other, 'a');
	 * // => false
	 */
	export default function has(object: any, path: any): boolean;

}
declare module 'lodash-ts/hasIn' {
	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	export default function hasIn<T extends {}>(object: T, path: string): boolean;

}
declare module 'lodash-ts/intersection' {
	/**
	 * The base implementation of methods like `_.intersection`, without support
	 * for iteratee shorthands, that accepts an array of arrays to inspect.
	 *
	 * @private
	 * @param {Array} arr The arrays to be inspected.
	 * @param {Array} arrays The arrays to inspect.
	 * @returns {Array} Returns the new array of shared values.
	 * @example
	 *
	 * _.intersection([2, 1], [2, 3]);
	 * // => [2]
	 */
	export default function intersection<T>(arr: T[], ...arrays: T[][]): T[];

}
declare module 'lodash-ts/isArrayBuffer' {
	/**
	 * Checks if `value` is classified as an `ArrayBuffer` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayBuffer(new ArrayBuffer(2));
	 * // => true
	 *
	 * _.isArrayBuffer(new Array(2));
	 * // => false
	 */
	export default function isArrayBuffer(value: any): boolean;

}
declare module 'lodash-ts/isBoolean' {
	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */
	export default function isBoolean(value: any): boolean;

}
declare module 'lodash-ts/stubFalse' {
	/**
	 * A method that returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	export default function stubFalse(): boolean;

}
declare module 'lodash-ts/isBuffer' {
	 const isBuffer: (value: any) => boolean;
	export default isBuffer;

}
declare module 'lodash-ts/isDate' {
	/**
	 * Checks if `value` is classified as a `Date` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isDate(new Date);
	 * // => true
	 *
	 * _.isDate('Mon April 23 2012');
	 * // => false
	 */
	export default function isDate(value: any): boolean;

}
declare module 'lodash-ts/isPlainObject' {
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object,
	 *  else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	export default function isPlainObject(value: any): boolean;

}
declare module 'lodash-ts/isElement' {
	/**
	 * Checks if `value` is likely a DOM element.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a DOM element,
	 *  else `false`.
	 * @example
	 *
	 * _.isElement(document.body);
	 * // => true
	 *
	 * _.isElement('<body>');
	 * // => false
	 */
	export default function isElement(value: any): boolean;

}
declare module 'lodash-ts/isEmpty' {
	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	export default function isEmpty(value: any): boolean;

}
declare module 'lodash-ts/isTypedArray' {
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	export default function isTypedArray(value: any): boolean;

}
declare module 'lodash-ts/isEqual' {
	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are **not** supported.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent,
	 *  else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	export default function isEqual(value: any, other: any): boolean;

}
declare module 'lodash-ts/isError' {
	/**
	 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	 * `SyntaxError`, `TypeError`, or `URIError` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an error object,
	 *  else `false`.
	 * @example
	 *
	 * _.isError(new Error);
	 * // => true
	 *
	 * _.isError(Error);
	 * // => false
	 */
	export default function isError(value: any): boolean;

}
declare module 'lodash-ts/isFinite' {
	/**
	 * Checks if `value` is a finite primitive number.
	 *
	 * **Note:** This method is based on
	 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a finite number,
	 *  else `false`.
	 * @example
	 *
	 * _.isFinite(3);
	 * // => true
	 *
	 * _.isFinite(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isFinite(Infinity);
	 * // => false
	 *
	 * _.isFinite('3');
	 * // => false
	 */
	export default function is_finite(value: any): boolean;

}
declare module 'lodash-ts/isHash' {
	export default function isHash(obj: any): boolean;

}
declare module 'lodash-ts/isIdentical' {
	/**
	 * Determines whether two values are the same value.
	 *
	 * @param a First value to compare
	 * @param b Second value to compare
	 * @return true if the values are the same; false otherwise
	 */
	export default function isIdentical(a: any, b: any): boolean;

}
declare module 'lodash-ts/isInteger' {
	/**
	 * Checks if `value` is an integer.
	 *
	 * **Note:** This method is based on
	 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	 * @example
	 *
	 * _.isInteger(3);
	 * // => true
	 *
	 * _.isInteger(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isInteger(Infinity);
	 * // => false
	 *
	 * _.isInteger('3');
	 * // => false
	 */
	export default function isInteger(value: any): boolean;

}
declare module 'lodash-ts/isMap' {
	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	export default function isMap(value: any): boolean;

}
declare module 'lodash-ts/isNumber' {
	/**
	 * @module @feidao/core/lodash/isNumber
	 * @example
	 * import isNumber from '@feidao/core/lodash/isNumber';
	 * isNumber(3);
	 * // => true
	 *
	 * isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * isNumber(Infinity);
	 * // => true
	 *
	 * isNumber('3');
	 * // => false
	 * @see _.isNumber
	*/
	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	 * classified as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isNumber(3);
	 * // => true
	 *
	 * _.isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isNumber(Infinity);
	 * // => true
	 *
	 * _.isNumber('3');
	 * // => false
	 */
	export default function isNumber(value: any): boolean;

}
declare module 'lodash-ts/isNaN' {
	/**
	 * Checks if `value` is `NaN`.
	 *
	 * **Note:** This method is based on
	 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	 * `undefined` and other non-number values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 * @example
	 *
	 * _.isNaN(NaN);
	 * // => true
	 *
	 * _.isNaN(new Number(NaN));
	 * // => true
	 *
	 * isNaN(undefined);
	 * // => true
	 *
	 * _.isNaN(undefined);
	 * // => false
	 */
	export default function isNaN(value: any): boolean;

}
declare module 'lodash-ts/isNative' {
	/**
	 * Checks if `value` is a pristine native function.
	 *
	 * **Note:** This method can't reliably detect native functions in the
	 * presence of the `core-js` package because `core-js` circumvents this kind
	 * of detection. Despite multiple requests, the `core-js` maintainer has made
	 * it clear: any attempt to fix the detection will be obstructed. As a result,
	 * we're left with little choice but to throw an error. Unfortunately, this
	 * also affects packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	 * which rely on `core-js`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	export default function isNative(value: any): boolean;

}
declare module 'lodash-ts/isNil' {
	/**
	 * Checks if `value` is `null` or `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	 * @example
	 *
	 * _.isNil(null);
	 * // => true
	 *
	 * _.isNil(void 0);
	 * // => true
	 *
	 * _.isNil(NaN);
	 * // => false
	 */
	export default function isNil(value: any): boolean;

}
declare module 'lodash-ts/isNull' {
	/**
	 * Checks if `value` is `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	 * @example
	 *
	 * _.isNull(null);
	 * // => true
	 *
	 * _.isNull(void 0);
	 * // => false
	 */
	export default function isNull(value: any): boolean;

}
declare module 'lodash-ts/isPromiseLike' {
	export default function isPromiseLike(obj: any): boolean;

}
declare module 'lodash-ts/isRegExp' {
	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	export default function isRegExp(value: any): boolean;

}
declare module 'lodash-ts/isSafeInteger' {
	/**
	 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	 * double precision number which isn't the result of a rounded unsafe integer.
	 *
	 * **Note:** This method is based on
	 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a safe integer,
	 *  else `false`.
	 * @example
	 *
	 * _.isSafeInteger(3);
	 * // => true
	 *
	 * _.isSafeInteger(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isSafeInteger(Infinity);
	 * // => false
	 *
	 * _.isSafeInteger('3');
	 * // => false
	 */
	export default function isSafeInteger(value: any): boolean;

}
declare module 'lodash-ts/isSet' {
	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	export default function isSet(value: any): boolean;

}
declare module 'lodash-ts/isUndefined' {
	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */
	export default function isUndefined(value: any): boolean;

}
declare module 'lodash-ts/isWeakMap' {
	/**
	 * Checks if `value` is classified as a `WeakMap` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isWeakMap(new WeakMap);
	 * // => true
	 *
	 * _.isWeakMap(new Map);
	 * // => false
	 */
	export default function isWeakMap(value: any): boolean;

}
declare module 'lodash-ts/isWeakSet' {
	/**
	 * Checks if `value` is classified as a `WeakSet` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isWeakSet(new WeakSet);
	 * // => true
	 *
	 * _.isWeakSet(new Set);
	 * // => false
	 */
	export default function isWeakSet(value: any): boolean;

}
declare module 'lodash-ts/isinstanceof' {
	export default function instanceOf(obj: any, clazz: any): boolean;

}
declare module 'lodash-ts/keysIn' {
	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	export default function keysIn(object: any): string[];

}
declare module 'lodash-ts/lowerFirst' {
	 const lowerFirst: (str: string) => string;
	export default lowerFirst;

}
declare module 'lodash-ts/max' {
	/**
	 * Computes the maximum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * _.max([4, 2, 8, 6]);
	 * // => 8
	 *
	 * _.max([]);
	 * // => undefined
	 */
	export default function max(array: number[]): number;

}
declare module 'lodash-ts/sum' {
	/**
	 * Computes the sum of the values in `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.4.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {number} Returns the sum.
	 * @example
	 *
	 * _.sum([4, 2, 8, 6]);
	 * // => 20
	 */
	export default function sum(array: number[]): any;

}
declare module 'lodash-ts/mean' {
	/**
	 * Computes the mean of the values in `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {number} Returns the mean.
	 * @example
	 *
	 * _.mean([4, 2, 8, 6]);
	 * // => 5
	 */
	export default function mean(array: number[]): number;

}
declare module 'lodash-ts/min' {
	/**
	 * Computes the minimum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * _.min([4, 2, 8, 6]);
	 * // => 2
	 *
	 * _.min([]);
	 * // => undefined
	 */
	export default function min(array: number[]): number;

}
declare module 'lodash-ts/pad' {
	/**
	 * Pads `string` on the left and right sides if it's shorter than `length`.
	 * Padding characters are truncated if they can't be evenly divided by `length`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.pad('abc', 8);
	 * // => '  abc   '
	 *
	 * _.pad('abc', 8, '_-');
	 * // => '_-abc_-_'
	 *
	 * _.pad('abc', 3);
	 * // => 'abc'
	 */
	export default function pad(str: string, length: number, chars: string): string;

}
declare module 'lodash-ts/padEnd' {
	/**
	 * Pads `string` on the right side if it's shorter than `length`. Padding
	 * characters are truncated if they exceed `length`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.padEnd('abc', 6);
	 * // => 'abc   '
	 *
	 * _.padEnd('abc', 6, '_-');
	 * // => 'abc_-_'
	 *
	 * _.padEnd('abc', 3);
	 * // => 'abc'
	 */
	export default function padEnd(str: string, length: number, chars: string): string;

}
declare module 'lodash-ts/padStart' {
	/**
	 * Pads `string` on the left side if it's shorter than `length`. Padding
	 * characters are truncated if they exceed `length`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.padStart('abc', 6);
	 * // => '   abc'
	 *
	 * _.padStart('abc', 6, '_-');
	 * // => '_-_abc'
	 *
	 * _.padStart('abc', 3);
	 * // => 'abc'
	 */
	export default function padStart(str: string, length: number, chars: string): string;

}
declare module 'lodash-ts/partial' {
	/**
	 * Returns a function which invokes the given function with the given arguments prepended to its argument list.
	 * Like `Function.prototype.bind`, but does not alter execution context.
	 *
	 * @param targetFunction The function that needs to be bound
	 * @param suppliedArgs An optional array of arguments to prepend to the `targetFunction` arguments list
	 * @return The bound function
	 */
	export default function partial(targetFunction: (...args: any[]) => any, ...suppliedArgs: any[]): (...args: any[]) => any;

}
declare module 'lodash-ts/random' {
	/**
	 * Produces a random number between the inclusive `lower` and `upper` bounds.
	 * If only one argument is provided a number between `0` and the given number
	 * is returned. If `floating` is `true`, or either `lower` or `upper` are
	 * floats, a floating-point number is returned instead of an integer.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.7.0
	 * @category Number
	 * @param {number} [lower=0] The lower bound.
	 * @param {number} [upper=1] The upper bound.
	 * @param {boolean} [floating] Specify returning a floating-point number.
	 * @returns {number} Returns the random number.
	 * @example
	 *
	 * _.random(0, 5);
	 * // => an integer between 0 and 5
	 *
	 * _.random(5);
	 * // => also an integer between 0 and 5
	 *
	 * _.random(5, true);
	 * // => a floating-point number between 0 and 5
	 *
	 * _.random(1.2, 5.2);
	 * // => a floating-point number between 1.2 and 5.2
	 */
	export default function random(lower?: number, upper?: number, floating?: boolean): number;

}
declare module 'lodash-ts/range' {
	/**
	 * Creates a `_.range` or `_.rangeRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new range function.
	 */
	export default function range(start?: number, end?: number): any;

}
declare module 'lodash-ts/remove-dups' {
	export default function removeDups<T>(arr: T[]): T[];

}
declare module 'lodash-ts/round' {
	 var _default: (num: number, precision: any) => number;
	export default _default;

}
declare module 'lodash-ts/values' {
	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	export default function values(object: any): any[];

}
declare module 'lodash-ts/sample' {
	/**
	 * Gets a random element from `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to sample.
	 * @returns {*} Returns the random element.
	 * @example
	 *
	 * _.sample([1, 2, 3, 4]);
	 * // => 2
	 */
	export default function sample(collection: any[]): any;

}
declare module 'lodash-ts/snakeCase' {
	 const snakeCase: (str: string) => string;
	export default snakeCase;

}
declare module 'lodash-ts/upperFirst' {
	 const upperFirst: (str: string) => string;
	export default upperFirst;

}
declare module 'lodash-ts/startCase' {
	 const startCase: (str: string) => string;
	export default startCase;

}
declare module 'lodash-ts/stubObject' {
	/**
	 * A method that returns a new empty object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Object} Returns the new empty object.
	 * @example
	 *
	 * var objects = _.times(2, _.stubObject);
	 *
	 * console.log(objects);
	 * // => [{}, {}]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => false
	 */
	export default function stubObject(): {};

}
declare module 'lodash-ts/stubString' {
	/**
	 * A method that returns an empty string.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {string} Returns the empty string.
	 * @example
	 *
	 * _.times(2, _.stubString);
	 * // => ['', '']
	 */
	export default function stubString(): string;

}
declare module 'lodash-ts/stubTrue' {
	/**
	 * A method that returns `true`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `true`.
	 * @example
	 *
	 * _.times(2, _.stubTrue);
	 * // => [true, true]
	 */
	export default function stubTrue(): boolean;

}
declare module 'lodash-ts/toArray' {
	/**
	 * @module @feidao/core/lodash/toArray
	 * @example
	 * import toArray from '@feidao/core/lodash/toArray';
	 *
	 * toArray({ 'a': 1, 'b': 2 });
	 * // => [1, 2]
	 *
	 * toArray('abc');
	 * // => ['a', 'b', 'c']
	 *
	 * toArray(1);
	 * // => []
	 *
	 * toArray(null);
	 * // => []
	 * @see _.toArray
	*/
	/**
	 * Converts `value` to an array.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the converted array.
	 * @example
	 *
	 * _.toArray({ 'a': 1, 'b': 2 });
	 * // => [1, 2]
	 *
	 * _.toArray('abc');
	 * // => ['a', 'b', 'c']
	 *
	 * _.toArray(1);
	 * // => []
	 *
	 * _.toArray(null);
	 * // => []
	 */
	export default function toArray(value: any): any[];

}
declare module 'lodash-ts/toNumber' {
	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	export default function toNumber(value: any): number;

}
declare module 'lodash-ts/toPlainObject' {
	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	export default function toPlainObject(value: any): {};

}
declare module 'lodash-ts/truncate' {
	/**
	 * Truncates `string` if it's longer than the given maximum string length.
	 * The last characters of the truncated string are replaced with the omission
	 * string which defaults to "...".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to truncate.
	 * @param {Object} [options={}] The options object.
	 * @param {number} [options.length=30] The maximum string length.
	 * @param {string} [options.omission='...'] The string to indicate text is omitted.
	 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	 * @returns {string} Returns the truncated string.
	 * @example
	 *
	 * _.truncate('hi-diddly-ho there, neighborino');
	 * // => 'hi-diddly-ho there, neighbo...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': ' '
	 * });
	 * // => 'hi-diddly-ho there,...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': /,? +/
	 * });
	 * // => 'hi-diddly-ho there...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'omission': ' [...]'
	 * });
	 * // => 'hi-diddly-ho there, neig [...]'
	 */
	export default function truncate(str: string, separator: string | RegExp, length?: number, omission?: string): string;

}
declare module 'lodash-ts/unescape' {
	/**
	 * The inverse of `_.escape`; this method converts the HTML entities
	 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
	 * their corresponding characters.
	 *
	 * **Note:** No other HTML entities are unescaped. To unescape additional
	 * HTML entities use a third-party library like [_he_](https://mths.be/he).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.6.0
	 * @category String
	 * @param {string} [string=''] The string to unescape.
	 * @returns {string} Returns the unescaped string.
	 * @example
	 *
	 * _.unescape('fred, barney, &amp; pebbles');
	 * // => 'fred, barney, & pebbles'
	 */
	export default function unescape(str: string): string;

}
declare module 'lodash-ts/uniq' {
	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurrence of each
	 * element is kept.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 */
	export default function uniq<T>(array: T[]): T[];

}
declare module 'lodash-ts/upperCase' {
	 const upperCase: (str: string) => string;
	export default upperCase;

}
declare module 'lodash-ts/uuid' {
	/**
	 * ## 生成一个唯一标识ID
	 * @param  {number} [len=36]   长度
	 * @param  {number} [salt=62] 随机数
	 * @return {string}       生成唯一标识ID
	 */
	export default function uuid(len?: number, salt?: number): string;

}
declare module 'lodash-ts/valuesIn' {
	/**
	 * Creates an array of the own and inherited enumerable string keyed property
	 * values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.valuesIn(new Foo);
	 * // => [1, 2, 3] (iteration order is not guaranteed)
	 */
	export default function valuesIn(object: any): any[];

}
declare module 'lodash-ts/without' {
	/**
	 * Creates an array excluding all given values using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...*} [values] The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.difference, _.xor
	 * @example
	 *
	 * _.without([2, 1, 2, 3], 1, 2);
	 * // => [3]
	 */
	export default function without<T>(array: T[], values: T[]): T[];

}
declare module 'lodash-ts/xor' {
	/**
	 * Creates an array of unique values that is the
	 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	 * of the given arrays. The order of result values is determined by the order
	 * they occur in the arrays.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.difference, _.without
	 * @example
	 *
	 * _.xor([2, 1], [2, 3]);
	 * // => [1, 3]
	 */
	export default function xor<T>(...arrays: T[][]): T[];

}
